
<!DOCTYPE html>
<html lang="cs">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>≈†achy pro zaƒç√°teƒçn√≠ky</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #2c3e50, #34495e);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }

        .game-area {
            display: flex;
            gap: 30px;
            padding: 30px;
            flex-wrap: wrap;
        }

        .board-container {
            flex: 1;
            min-width: 400px;
        }

        .chessboard {
            width: 400px;
            height: 400px;
            border: 4px solid #2c3e50;
            border-radius: 10px;
            overflow: hidden;
            margin: 0 auto;
            position: relative;
        }

        .row {
            display: flex;
            height: 12.5%;
        }

        .square {
            width: 12.5%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 32px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

        .square.white {
            background-color: #f0d9b5;
        }

        .square.black {
            background-color: #b58863;
        }

        .square.selected {
            background-color: #7fff00 !important;
            box-shadow: inset 0 0 20px rgba(0,0,0,0.3);
        }

        .square.possible-move {
            background-color: #90EE90 !important;
        }

        .square.possible-move::after {
            content: '';
            position: absolute;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background-color: rgba(0,0,0,0.3);
        }

        .info-panel {
            flex: 1;
            min-width: 300px;
            background: #f8f9fa;
            border-radius: 15px;
            padding: 25px;
        }

        .turn-indicator {
            background: linear-gradient(135deg, #4CAF50, #45a049);
            color: white;
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            margin-bottom: 20px;
            font-size: 1.2em;
            font-weight: bold;
        }

        .game-status {
            background: #e3f2fd;
            border-left: 4px solid #2196F3;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .controls {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        button {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: bold;
            transition: all 0.3s ease;
        }

        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }

        .rules {
            background: white;
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
            border: 2px solid #e0e0e0;
        }

        .rules h3 {
            color: #2c3e50;
            margin-bottom: 15px;
            border-bottom: 2px solid #eee;
            padding-bottom: 8px;
        }

        .rules ul {
            list-style: none;
            padding-left: 0;
        }

        .rules li {
            margin-bottom: 8px;
            padding-left: 20px;
            position: relative;
        }

        .rules li::before {
            content: '‚ôû';
            position: absolute;
            left: 0;
            color: #667eea;
        }

        .coordinates {
            position: absolute;
            font-size: 12px;
            font-weight: bold;
            color: #666;
        }

        .coord-letter {
            bottom: 2px;
            right: 4px;
        }

        .coord-number {
            top: 2px;
            left: 4px;
        }

        @media (max-width: 768px) {
            .game-area {
                flex-direction: column;
            }
            
            .chessboard {
                width: 320px;
                height: 320px;
            }
            
            .square {
                font-size: 24px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üè∞ ≈†achy pro zaƒç√°teƒçn√≠ky üè∞</h1>
            <p>Nauƒçte se hr√°t ≈°achy krok za krokem!</p>
        </div>

        <div class="game-area">
            <div class="board-container">
                <div class="chessboard" id="chessboard"></div>
            </div>

            <div class="info-panel">
                <div class="turn-indicator" id="turnIndicator">
                    Na tahu: B√≠l√Ω hr√°ƒç
                </div>

                <div class="game-status" id="gameStatus">
                    V√≠tejte ve h≈ôe! Kliknƒõte na figurku a pak na c√≠lov√© pole.
                </div>

                <div class="controls">
                    <button onclick="resetGame()">Nov√° hra</button>
                    <button onclick="toggleHelp()">N√°povƒõda</button>
                </div>

                <div class="rules">
                    <h3>üéØ Z√°kladn√≠ pravidla</h3>
                    <ul>
                        <li><strong>Kr√°l (‚ôî)</strong> - pohybuje se o 1 pole v≈°emi smƒõry</li>
                        <li><strong>D√°ma (‚ôï)</strong> - pohybuje se v≈°emi smƒõry neomezenƒõ</li>
                        <li><strong>Vƒõ≈æ (‚ôñ)</strong> - pohybuje se vodorovnƒõ a svisle</li>
                        <li><strong>St≈ôelec (‚ôó)</strong> - pohybuje se diagon√°lnƒõ</li>
                        <li><strong>Jezdec (‚ôò)</strong> - pohybuje se ve tvaru "L"</li>
                        <li><strong>Pƒõ≈°ec (‚ôô)</strong> - vp≈ôed o 1 pole, ze z√°kladn√≠ pozice o 2</li>
                    </ul>

                    <h3>üéÆ Jak hr√°t</h3>
                    <ul>
                        <li>Kliknƒõte na figurku, kterou chcete p≈ôesunout</li>
                        <li>Uvid√≠te mo≈æn√© tahy zelenou barvou</li>
                        <li>Kliknƒõte na c√≠lov√© pole</li>
                        <li>C√≠lem je d√°t soupe≈ôovu kr√°li ≈°ach mat</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Poƒç√°teƒçn√≠ rozlo≈æen√≠ ≈°achovnice
        let board = [
            ['‚ôú','‚ôû','‚ôù','‚ôõ','‚ôö','‚ôù','‚ôû','‚ôú'],
            ['‚ôü','‚ôü','‚ôü','‚ôü','‚ôü','‚ôü','‚ôü','‚ôü'],
            ['','','','','','','',''],
            ['','','','','','','',''],
            ['','','','','','','',''],
            ['','','','','','','',''],
            ['‚ôô','‚ôô','‚ôô','‚ôô','‚ôô','‚ôô','‚ôô','‚ôô'],
            ['‚ôñ','‚ôò','‚ôó','‚ôï','‚ôî','‚ôó','‚ôò','‚ôñ']
        ];

        let currentPlayer = 'white';
        let selectedSquare = null;
        let possibleMoves = [];

        // Mapov√°n√≠ figurek na barvy
        const whitePieces = ['‚ôî','‚ôï','‚ôñ','‚ôó','‚ôò','‚ôô'];
        const blackPieces = ['‚ôö','‚ôõ','‚ôú','‚ôù','‚ôû','‚ôü'];

        function createBoard() {
            const chessboard = document.getElementById('chessboard');
            chessboard.innerHTML = '';

            for (let row = 0; row < 8; row++) {
                const rowDiv = document.createElement('div');
                rowDiv.className = 'row';

                for (let col = 0; col < 8; col++) {
                    const square = document.createElement('div');
                    square.className = `square ${(row + col) % 2 === 0 ? 'white' : 'black'}`;
                    square.dataset.row = row;
                    square.dataset.col = col;
                    square.textContent = board[row][col];
                    square.addEventListener('click', () => handleSquareClick(row, col));

                    // P≈ôid√°n√≠ sou≈ôadnic
                    if (col === 7) {
                        const coordNumber = document.createElement('div');
                        coordNumber.className = 'coordinates coord-number';
                        coordNumber.textContent = 8 - row;
                        square.appendChild(coordNumber);
                    }
                    if (row === 7) {
                        const coordLetter = document.createElement('div');
                        coordLetter.className = 'coordinates coord-letter';
                        coordLetter.textContent = String.fromCharCode(97 + col);
                        square.appendChild(coordLetter);
                    }

                    rowDiv.appendChild(square);
                }
                chessboard.appendChild(rowDiv);
            }
        }

        function handleSquareClick(row, col) {
            const piece = board[row][col];
            
            // Pokud je vybran√© pole mo≈æn√Ω tah
            if (possibleMoves.some(move => move.row === row && move.col === col)) {
                makeMove(selectedSquare.row, selectedSquare.col, row, col);
                return;
            }

            // Pokud klikneme na vlastn√≠ figurku
            if (piece && isPieceOwnedByPlayer(piece, currentPlayer)) {
                selectSquare(row, col);
            } else {
                clearSelection();
            }
        }

        function selectSquare(row, col) {
            clearSelection();
            selectedSquare = {row, col};
            possibleMoves = getPossibleMoves(row, col);
            
            // Zv√Ωraznƒõn√≠ vybran√©ho pole
            const squares = document.querySelectorAll('.square');
            squares[row * 8 + col].classList.add('selected');
            
            // Zv√Ωraznƒõn√≠ mo≈æn√Ωch tah≈Ø
            possibleMoves.forEach(move => {
                squares[move.row * 8 + move.col].classList.add('possible-move');
            });
        }

        function clearSelection() {
            selectedSquare = null;
            possibleMoves = [];
            document.querySelectorAll('.square').forEach(square => {
                square.classList.remove('selected', 'possible-move');
            });
        }

        function makeMove(fromRow, fromCol, toRow, toCol) {
            const piece = board[fromRow][fromCol];
            const capturedPiece = board[toRow][toCol];
            
            board[toRow][toCol] = piece;
            board[fromRow][fromCol] = '';
            
            // Zmƒõna hr√°ƒçe
            currentPlayer = currentPlayer === 'white' ? 'black' : 'white';
            
            updateDisplay();
            clearSelection();
            
            // Hl√°≈°en√≠ o tahu
            let message = `${piece} se p≈ôesunul na ${String.fromCharCode(97 + toCol)}${8 - toRow}`;
            if (capturedPiece) {
                message += ` a sebral ${capturedPiece}`;
            }
            
            document.getElementById('gameStatus').textContent = message;
        }

        function getPossibleMoves(row, col) {
            const piece = board[row][col];
            const moves = [];
            
            // Jednoduch√© pohyby pro uk√°zku (ne v≈°echna pravidla implementov√°na)
            switch(piece) {
                case '‚ôî': case '‚ôö': // Kr√°l
                    for (let dr = -1; dr <= 1; dr++) {
                        for (let dc = -1; dc <= 1; dc++) {
                            if (dr === 0 && dc === 0) continue;
                            const newRow = row + dr;
                            const newCol = col + dc;
                            if (isValidMove(newRow, newCol, currentPlayer)) {
                                moves.push({row: newRow, col: newCol});
                            }
                        }
                    }
                    break;
                    
                case '‚ôñ': case '‚ôú': // Vƒõ≈æ
                    // Horizont√°ln√≠ a vertik√°ln√≠ pohyby
                    const directions = [[0,1], [0,-1], [1,0], [-1,0]];
                    for (let [dr, dc] of directions) {
                        for (let i = 1; i < 8; i++) {
                            const newRow = row + dr * i;
                            const newCol = col + dc * i;
                            if (!isValidMove(newRow, newCol, currentPlayer)) break;
                            moves.push({row: newRow, col: newCol});
                            if (board[newRow][newCol] !== '') break; // Zastavit p≈ôi figurce
                        }
                    }
                    break;
                    
                case '‚ôô': // B√≠l√Ω pƒõ≈°ec
                    if (row > 0 && board[row-1][col] === '') {
                        moves.push({row: row-1, col});
                        if (row === 6 && board[row-2][col] === '') {
                            moves.push({row: row-2, col});
                        }
                    }
                    // Bran√≠
                    if (row > 0 && col > 0 && board[row-1][col-1] !== '' && !isPieceOwnedByPlayer(board[row-1][col-1], currentPlayer)) {
                        moves.push({row: row-1, col: col-1});
                    }
                    if (row > 0 && col < 7 && board[row-1][col+1] !== '' && !isPieceOwnedByPlayer(board[row-1][col+1], currentPlayer)) {
                        moves.push({row: row-1, col: col+1});
                    }
                    break;
                    
                case '‚ôü': // ƒåern√Ω pƒõ≈°ec
                    if (row < 7 && board[row+1][col] === '') {
                        moves.push({row: row+1, col});
                        if (row === 1 && board[row+2][col] === '') {
                            moves.push({row: row+2, col});
                        }
                    }
                    // Bran√≠
                    if (row < 7 && col > 0 && board[row+1][col-1] !== '' && !isPieceOwnedByPlayer(board[row+1][col-1], currentPlayer)) {
                        moves.push({row: row+1, col: col-1});
                    }
                    if (row < 7 && col < 7 && board[row+1][col+1] !== '' && !isPieceOwnedByPlayer(board[row+1][col+1], currentPlayer)) {
                        moves.push({row: row+1, col: col+1});
                    }
                    break;
            }
            
            return moves;
        }

        function isValidMove(row, col, player) {
            if (row < 0 || row >= 8 || col < 0 || col >= 8) return false;
            const targetPiece = board[row][col];
            if (targetPiece === '') return true;
            return !isPieceOwnedByPlayer(targetPiece, player);
        }

        function isPieceOwnedByPlayer(piece, player) {
            if (player === 'white') return whitePieces.includes(piece);
            return blackPieces.includes(piece);
        }

        function updateDisplay() {
            createBoard();
            const playerName = currentPlayer === 'white' ? 'B√≠l√Ω hr√°ƒç' : 'ƒåern√Ω hr√°ƒç';
            document.getElementById('turnIndicator').textContent = `Na tahu: ${playerName}`;
        }

        function resetGame() {
            board = [
                ['‚ôú','‚ôû','‚ôù','‚ôõ','‚ôö','‚ôù','‚ôû','‚ôú'],
                ['‚ôü','‚ôü','‚ôü','‚ôü','‚ôü','‚ôü','‚ôü','‚ôü'],
                ['','','','','','','',''],
                ['','','','','','','',''],
                ['','','','','','','',''],
                ['','','','','','','',''],
                ['‚ôô','‚ôô','‚ôô','‚ôô','‚ôô','‚ôô','‚ôô','‚ôô'],
                ['‚ôñ','‚ôò','‚ôó','‚ôï','‚ôî','‚ôó','‚ôò','‚ôñ']
            ];
            currentPlayer = 'white';
            clearSelection();
            updateDisplay();
            document.getElementById('gameStatus').textContent = 'Nov√° hra zaƒçala! Kliknƒõte na figurku a pak na c√≠lov√© pole.';
        }

        function toggleHelp() {
            const rules = document.querySelector('.rules');
            rules.style.display = rules.style.display === 'none' ? 'block' : 'none';
        }

        // Inicializace hry
        createBoard();
    </script>
</body>
</html>
