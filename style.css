<!DOCTYPE html>
<html lang="cs">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>≈†achy pro zaƒç√°teƒçn√≠ky</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
            margin: 20px;
        }

        .header {
            background: linear-gradient(135deg, #2c3e50, #34495e);
            color: white;
            padding: 40px;
            text-align: center;
        }

        .header h1 {
            font-size: 3em;
            margin-bottom: 15px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .header p {
            font-size: 1.3em;
            opacity: 0.9;
        }

        .nav-menu {
            background: #34495e;
            padding: 0;
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            gap: 0;
        }

        .nav-button {
            background: transparent;
            color: white;
            border: none;
            padding: 20px 30px;
            cursor: pointer;
            font-size: 16px;
            font-weight: bold;
            transition: all 0.3s ease;
            border-bottom: 3px solid transparent;
        }

        .nav-button:hover {
            background: rgba(255,255,255,0.1);
            border-bottom-color: #3498db;
        }

        .nav-button.active {
            background: rgba(255,255,255,0.2);
            border-bottom-color: #e74c3c;
        }

        .content-section {
            display: none;
            padding: 40px;
            min-height: 600px;
        }

        .content-section.active {
            display: block;
        }

        .intro-section {
            text-align: center;
        }

        .intro-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
            margin-top: 40px;
        }

        .intro-card {
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }

        .intro-card:hover {
            transform: translateY(-5px);
        }

        .intro-card h3 {
            color: #2c3e50;
            margin-bottom: 15px;
            font-size: 1.5em;
        }

        .intro-card p {
            color: #555;
            margin-bottom: 20px;
        }

        .start-button {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 25px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .start-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.2);
        }

        .rules-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 30px;
            margin-top: 30px;
        }

        .rule-card {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 25px;
            border-left: 5px solid #3498db;
        }

        .rule-card h3 {
            color: #2c3e50;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .piece-icon {
            font-size: 2em;
        }

        .strategy-tips {
            background: linear-gradient(135deg, #e8f5e8, #d4edda);
            border-radius: 15px;
            padding: 25px;
            margin: 20px 0;
            border-left: 5px solid #28a745;
        }

        .chessboard {
            width: 400px;
            height: 400px;
            border: 4px solid #2c3e50;
            border-radius: 10px;
            overflow: hidden;
            margin: 20px auto;
            position: relative;
        }

        .row {
            display: flex;
            height: 12.5%;
        }

        .square {
            width: 12.5%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 32px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

        .square.white {
            background-color: #f0d9b5;
        }

        .square.black {
            background-color: #b58863;
        }

        .square.selected {
            background-color: #7fff00 !important;
            box-shadow: inset 0 0 20px rgba(0,0,0,0.3);
        }

        .square.possible-move {
            background-color: #90EE90 !important;
        }

        .square.possible-move::after {
            content: '';
            position: absolute;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background-color: rgba(0,0,0,0.3);
        }

        .game-interface {
            display: flex;
            gap: 30px;
            align-items: flex-start;
            flex-wrap: wrap;
        }

        .game-controls {
            flex: 1;
            min-width: 300px;
            background: #f8f9fa;
            border-radius: 15px;
            padding: 25px;
        }

        .turn-indicator {
            background: linear-gradient(135deg, #4CAF50, #45a049);
            color: white;
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            margin-bottom: 20px;
            font-size: 1.2em;
            font-weight: bold;
        }

        .game-status {
            background: #e3f2fd;
            border-left: 4px solid #2196F3;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .control-buttons {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        button {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: bold;
            transition: all 0.3s ease;
        }

        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }

        .coordinates {
            position: absolute;
            font-size: 12px;
            font-weight: bold;
            color: #666;
        }

        .coord-letter {
            bottom: 2px;
            right: 4px;
        }

        .coord-number {
            top: 2px;
            left: 4px;
        }

        .tutorial-step {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 10px;
            padding: 20px;
            margin: 20px 0;
        }

        .tutorial-step h4 {
            color: #856404;
            margin-bottom: 10px;
        }

        @media (max-width: 768px) {
            .nav-menu {
                flex-direction: column;
            }
            
            .nav-button {
                padding: 15px;
            }
            
            .game-interface {
                flex-direction: column;
            }
            
            .chessboard {
                width: 320px;
                height: 320px;
            }
            
            .square {
                font-size: 24px;
            }
            
            .intro-cards {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>‚ôî ≈†achy pro zaƒç√°teƒçn√≠ky ‚ôõ</h1>
            <p>Kompletn√≠ pr≈Øvodce svƒõtem ≈°ach≈Ø</p>
        </div>

        <nav class="nav-menu">
            <button class="nav-button active" onclick="showSection('intro')">üè† √övod</button>
            <button class="nav-button" onclick="showSection('rules')">üìñ Pravidla</button>
            <button class="nav-button" onclick="showSection('pieces')">‚ôû Figurky</button>
            <button class="nav-button" onclick="showSection('tutorial')">üéì Jak hr√°t</button>
            <button class="nav-button" onclick="showSection('strategy')">üß† Strategie</button>
            <button class="nav-button" onclick="showSection('game')">üéÆ Hr√°t</button>
        </nav>

        <!-- √öVOD -->
        <div id="intro" class="content-section active">
            <div class="intro-section">
                <h2>V√≠tejte ve svƒõtƒõ ≈°ach≈Ø!</h2>
                <p style="font-size: 1.2em; margin: 20px 0; color: #555;">
                    ≈†achy jsou kr√°lovskou hrou ji≈æ po stalet√≠. Nauƒçte se hr√°t tuto fascinuj√≠c√≠ strategickou hru krok za krokem.
                </p>

                <div class="intro-cards">
                    <div class="intro-card">
                        <h3>üéØ Proƒç hr√°t ≈°achy?</h3>
                        <p>≈†achy rozv√≠jej√≠ logick√© my≈°len√≠, koncentraci a strategick√© pl√°nov√°n√≠. Jsou skvƒõlou ment√°ln√≠ cviƒçen√≠m pro v≈°echny vƒõkov√© kategorie.</p>
                        <button class="start-button" onclick="showSection('rules')">Zaƒç√≠t s pravidly</button>
                    </div>

                    <div class="intro-card">
                        <h3>üìö Co se nauƒç√≠te?</h3>
                        <p>Pochop√≠te pohyby v≈°ech figurek, z√°kladn√≠ pravidla, jednoduch√© strategie a budete moci hr√°t sv√© prvn√≠ party.</p>
                        <button class="start-button" onclick="showSection('pieces')">Poznat figurky</button>
                    </div>

                    <div class="intro-card">
                        <h3>üöÄ Rychl√Ω start</h3>
                        <p>U≈æ zn√°te z√°klady? P≈ôejdƒõte rovnou k interaktivn√≠ h≈ôe a zaƒçnƒõte tr√©novat sv√© ≈°achov√© dovednosti.</p>
                        <button class="start-button" onclick="showSection('game')">Hr√°t hned</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- PRAVIDLA -->
        <div id="rules" class="content-section">
            <h2>üéØ Z√°kladn√≠ pravidla ≈°ach≈Ø</h2>
            
            <div class="rules-grid">
                <div class="rule-card">
                    <h3>üé≤ C√≠l hry</h3>
                    <p>Hlavn√≠m c√≠lem je d√°t soupe≈ôovu kr√°li <strong>≈°ach mat</strong>. To znamen√°, ≈æe kr√°l je napaden a nem√° mo≈ænost √∫niku.</p>
                </div>

                <div class="rule-card">
                    <h3>üîÑ St≈ô√≠d√°n√≠ tah≈Ø</h3>
                    <p>Hr√°ƒçi se st≈ô√≠daj√≠ v taz√≠ch. Zaƒç√≠n√° v≈ædy hr√°ƒç s b√≠l√Ωmi figurkami. V ka≈æd√©m tahu m≈Ø≈æete pohnout pouze jednou figurkou.</p>
                </div>

                <div class="rule-card">
                    <h3>‚öîÔ∏è Bran√≠ figurek</h3>
                    <p>Figurka bere soupe≈ôovu figurku tak, ≈æe se postav√≠ na jej√≠ pole. Sebran√° figurka se odstran√≠ ze ≈°achovnice.</p>
                </div>

                <div class="rule-card">
                    <h3>üëë ≈†ach</h3>
                    <p>Kdy≈æ je kr√°l napaden, ≈ô√≠k√°me mu <strong>≈°ach</strong>. Hr√°ƒç mus√≠ okam≈æitƒõ zareagovat a kr√°le ochr√°nit.</p>
                </div>
            </div>

            <div class="strategy-tips">
                <h3>üí° Z√°kladn√≠ tipy pro zaƒç√°teƒçn√≠ky</h3>
                <ul style="margin-left: 20px;">
                    <li>V≈ædy chra≈àte sv√©ho kr√°le</li>
                    <li>Sna≈æte se ovl√°dat st≈ôed ≈°achovnice</li>
                    <li>Rozv√≠jejte sv√© figurky postupnƒõ</li>
                    <li>Nestavte figurky tam, kde je soupe≈ô m≈Ø≈æe snadno sebrat</li>
                </ul>
            </div>
        </div>

        <!-- FIGURKY -->
        <div id="pieces" class="content-section">
            <h2>‚ôû ≈†achov√© figurky a jejich pohyby</h2>
            
            <div class="rules-grid">
                <div class="rule-card">
                    <h3><span class="piece-icon">‚ôî</span>Kr√°l</h3>
                    <p><strong>Pohyb:</strong> O jedno pole v≈°emi smƒõry (vodorovnƒõ, svisle, diagon√°lnƒõ)</p>
                    <p><strong>Hodnota:</strong> Neoceniteln√Ω - hra konƒç√≠ jeho ztr√°tou</p>
                </div>

                <div class="rule-card">
                    <h3><span class="piece-icon">‚ôï</span>D√°ma</h3>
                    <p><strong>Pohyb:</strong> Libovoln√Ω poƒçet pol√≠ v≈°emi smƒõry</p>
                    <p><strong>Hodnota:</strong> 9 bod≈Ø - nejmocnƒõj≈°√≠ figurka</p>
                </div>

                <div class="rule-card">
                    <h3><span class="piece-icon">‚ôñ</span>Vƒõ≈æ</h3>
                    <p><strong>Pohyb:</strong> Libovoln√Ω poƒçet pol√≠ vodorovnƒõ nebo svisle</p>
                    <p><strong>Hodnota:</strong> 5 bod≈Ø</p>
                </div>

                <div class="rule-card">
                    <h3><span class="piece-icon">‚ôó</span>St≈ôelec</h3>
                    <p><strong>Pohyb:</strong> Libovoln√Ω poƒçet pol√≠ diagon√°lnƒõ</p>
                    <p><strong>Hodnota:</strong> 3 body</p>
                </div>

                <div class="rule-card">
                    <h3><span class="piece-icon">‚ôò</span>Jezdec</h3>
                    <p><strong>Pohyb:</strong> Ve tvaru p√≠smene "L" - 2 pole jedn√≠m smƒõrem + 1 pole kolmo</p>
                    <p><strong>Hodnota:</strong> 3 body</p>
                </div>

                <div class="rule-card">
                    <h3><span class="piece-icon">‚ôô</span>Pƒõ≈°ec</h3>
                    <p><strong>Pohyb:</strong> Vp≈ôed o 1 pole, ze z√°kladn√≠ pozice o 2 pole</p>
                    <p><strong>Bran√≠:</strong> Diagon√°lnƒõ vp≈ôed</p>
                    <p><strong>Hodnota:</strong> 1 bod</p>
                </div>
            </div>
        </div>

        <!-- TUTORI√ÅL -->
        <div id="tutorial" class="content-section">
            <h2>üéì Jak hr√°t ≈°achy - krok za krokem</h2>
            
            <div class="tutorial-step">
                <h4>Krok 1: Postaven√≠ ≈°achovnice</h4>
                <p>≈†achovnice se postav√≠ tak, aby v prav√©m doln√≠m rohu bylo b√≠l√© pole. B√≠l√© figurky se um√≠st√≠ na spodn√≠ dvƒõ ≈ôady, ƒçern√© na horn√≠ dvƒõ.</p>
            </div>

            <div class="tutorial-step">
                <h4>Krok 2: Zaƒç√°tek hry</h4>
                <p>Zaƒç√≠n√° v≈ædy hr√°ƒç s b√≠l√Ωmi figurkami. Dobr√Ω prvn√≠ tah je pohnout pƒõ≈°cem p≈ôed kr√°lem nebo d√°mou o 2 pole vp≈ôed.</p>
            </div>

            <div class="tutorial-step">
                <h4>Krok 3: Rozvoj figurek</h4>
                <p>Sna≈æte se rychle rozv√≠jet sv√© figurky - nejd≈ô√≠ve jezdce a st≈ôelce, pak vƒõ≈æe. Vyhnƒõte se opakovan√©mu pohybu stejn√© figurky.</p>
            </div>

            <div class="tutorial-step">
                <h4>Krok 4: Bezpeƒçnost kr√°le</h4>
                <p>Proveƒète ro≈°√°du (speci√°ln√≠ tah s kr√°lem a vƒõ≈æ√≠) pro bezpeƒçnost kr√°le. Ro≈°√°da se prov√°d√≠ tak, ≈æe kr√°l se posune o 2 pole k vƒõ≈æi a vƒõ≈æ p≈ôeskoƒç√≠ na druhou stranu kr√°le.</p>
            </div>

            <div class="tutorial-step">
                <h4>Krok 5: Pl√°nov√°n√≠</h4>
                <p>V≈ædy se sna≈æte m√≠t pl√°n. √ötoƒçte na soupe≈ôovy slab√© figurky, ovl√°dnƒõte st≈ôed ≈°achovnice a hledejte mo≈ænosti ≈°achu nebo matu.</p>
            </div>
        </div>

        <!-- STRATEGIE -->
        <div id="strategy" class="content-section">
            <h2>üß† Z√°kladn√≠ strategie</h2>
            
            <div class="strategy-tips">
                <h3>‚≠ê Zah√°jen√≠ hry</h3>
                <p><strong>C√≠le v zah√°jen√≠:</strong></p>
                <ul style="margin-left: 20px;">
                    <li>Ovl√°dnƒõte st≈ôed ≈°achovnice pƒõ≈°ci</li>
                    <li>Rychle rozv√≠jejte lehk√© figurky (jezdce, st≈ôelce)</li>
                    <li>Zajistƒõte bezpeƒçnost kr√°le ro≈°√°dou</li>
                    <li>Neopakujte zbyteƒçnƒõ tahy</li>
                </ul>
            </div>

            <div class="strategy-tips">
                <h3>‚öîÔ∏è St≈ôedn√≠ hra</h3>
                <p><strong>Kl√≠ƒçov√© principy:</strong></p>
                <ul style="margin-left: 20px;">
                    <li>Koordinujte sv√© figurky</li>
                    <li>Hledejte taktick√© mo≈ænosti (vidliƒçky, napichov√°n√≠)</li>
                    <li>Vylep≈°ujte pozice sv√Ωch figurek</li>
                    <li>Sledujte soupe≈ôovy slabosti</li>
                </ul>
            </div>

            <div class="strategy-tips">
                <h3>üëë Koncovka</h3>
                <p><strong>D≈Øle≈æit√© z√°sady:</strong></p>
                <ul style="margin-left: 20px;">
                    <li>Aktivizujte kr√°le</li>
                    <li>Podporujte sv√© pro≈°l√© pƒõ≈°ce</li>
                    <li>Nauƒçte se z√°kladn√≠ matov√© pozice</li>
                    <li>Centralizujte kr√°le</li>
                </ul>
            </div>
        </div>

        <!-- HRA -->
        <div id="game" class="content-section">
            <h2>üéÆ Interaktivn√≠ ≈°achovnice</h2>
            
            <div class="game-interface">
                <div>
                    <div class="chessboard" id="chessboard"></div>
                </div>

                <div class="game-controls">
                    <div class="turn-indicator" id="turnIndicator">
                        Na tahu: B√≠l√Ω hr√°ƒç
                    </div>

                    <div class="game-status" id="gameStatus">
                        V√≠tejte ve h≈ôe! Kliknƒõte na figurku, kterou chcete p≈ôesunout, a pak na c√≠lov√© pole.
                    </div>

                    <div class="control-buttons">
                        <button onclick="resetGame()">üîÑ Nov√° hra</button>
                        <button onclick="showHint()">üí° N√°povƒõda</button>
                        <button onclick="undoMove()">‚Ü©Ô∏è Zpƒõt</button>
                    </div>

                    <div class="rule-card">
                        <h3>üéØ N√°vod k ovl√°d√°n√≠</h3>
                        <p>1. Kliknƒõte na figurku, kterou chcete p≈ôesunout</p>
                        <p>2. Uvid√≠te mo≈æn√© tahy zv√Ωraznƒõn√© zelenƒõ</p>
                        <p>3. Kliknƒõte na c√≠lov√© pole</p>
                        <p>4. Figurka se p≈ôesune a tah p≈ôejde na soupe≈ôe</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Poƒç√°teƒçn√≠ rozlo≈æen√≠ ≈°achovnice
        let board = [
            ['‚ôú','‚ôû','‚ôù','‚ôõ','‚ôö','‚ôù','‚ôû','‚ôú'],
            ['‚ôü','‚ôü','‚ôü','‚ôü','‚ôü','‚ôü','‚ôü','‚ôü'],
            ['','','','','','','',''],
            ['','','','','','','',''],
            ['','','','','','','',''],
            ['','','','','','','',''],
            ['‚ôô','‚ôô','‚ôô','‚ôô','‚ôô','‚ôô','‚ôô','‚ôô'],
            ['‚ôñ','‚ôò','‚ôó','‚ôï','‚ôî','‚ôó','‚ôò','‚ôñ']
        ];

        let currentPlayer = 'white';
        let selectedSquare = null;
        let possibleMoves = [];
        let moveHistory = [];

        // Mapov√°n√≠ figurek na barvy
        const whitePieces = ['‚ôî','‚ôï','‚ôñ','‚ôó','‚ôò','‚ôô'];
        const blackPieces = ['‚ôö','‚ôõ','‚ôú','‚ôù','‚ôû','‚ôü'];

        // Navigace mezi sekcemi
        function showSection(sectionId) {
            // Skr√Ωt v≈°echny sekce
            document.querySelectorAll('.content-section').forEach(section => {
                section.classList.remove('active');
            });
            
            // Deaktivovat v≈°echna tlaƒç√≠tka
            document.querySelectorAll('.nav-button').forEach(button => {
                button.classList.remove('active');
            });
            
            // Zobrazit zvolenou sekci
            document.getElementById(sectionId).classList.add('active');
            
            // Aktivovat p≈ô√≠slu≈°n√© tlaƒç√≠tko
            event.target.classList.add('active');
            
            // Pokud p≈ôech√°z√≠me na hru, inicializuj ≈°achovnici
            if (sectionId === 'game') {
                setTimeout(createBoard, 100);
            }
        }

        function createBoard() {
            const chessboard = document.getElementById('chessboard');
            if (!chessboard) return;
            
            chessboard.innerHTML = '';

            for (let row = 0; row < 8; row++) {
                const rowDiv = document.createElement('div');
                rowDiv.className = 'row';

                for (let col = 0; col < 8; col++) {
                    const square = document.createElement('div');
                    square.className = `square ${(row + col) % 2 === 0 ? 'white' : 'black'}`;
                    square.dataset.row = row;
                    square.dataset.col = col;
                    square.textContent = board[row][col];
                    square.addEventListener('click', () => handleSquareClick(row, col));

                    // P≈ôid√°n√≠ sou≈ôadnic
                    if (col === 7) {
                        const coordNumber = document.createElement('div');
                        coordNumber.className = 'coordinates coord-number';
                        coordNumber.textContent = 8 - row;
                        square.appendChild(coordNumber);
                    }
                    if (row === 7) {
                        const coordLetter = document.createElement('div');
                        coordLetter.className = 'coordinates coord-letter';
                        coordLetter.textContent = String.fromCharCode(97 + col);
                        square.appendChild(coordLetter);
                    }

                    rowDiv.appendChild(square);
                }
                chessboard.appendChild(rowDiv);
            }
        }

        function handleSquareClick(row, col) {
            const piece = board[row][col];
            
            // Pokud je vybran√© pole mo≈æn√Ω tah
            if (possibleMoves.some(move => move.row === row && move.col === col)) {
                makeMove(selectedSquare.row, selectedSquare.col, row, col);
                return;
            }

            // Pokud klikneme na vlastn√≠ figurku
            if (piece && isPieceOwnedByPlayer(piece, currentPlayer)) {
                selectSquare(row, col);
            } else {
                clearSelection();
            }
        }

        function selectSquare(row, col) {
            clearSelection();
            selectedSquare = {row, col};
            possibleMoves = getPossibleMoves(row, col);
            
            // Zv√Ωraznƒõn√≠ vybran√©ho pole
            const squares = document.querySelectorAll('.square');
            squares[row * 8 + col].classList.add('selected');
            
            // Zv√Ωraznƒõn√≠ mo≈æn√Ωch tah≈Ø
            possibleMoves.forEach(move => {
                squares[move.row * 8 + move.col].classList.add('possible-move');
            });

            updateGameStatus(`Vybr√°na figurka ${board[row][col]} na ${String.fromCharCode(97 + col)}${8 - row}. Kliknƒõte na c√≠lov√© pole.`);
        }

        function clearSelection() {
            selectedSquare = null;
            possibleMoves = [];
            document.querySelectorAll('.square').forEach(square => {
                square.classList.remove('selected', 'possible-move');
            });
        }

        function makeMove(fromRow, fromCol, toRow, toCol) {
            const piece = board[fromRow][fromCol];
            const capturedPiece = board[toRow][toCol];
            
            // Ulo≈æit tah do historie
            moveHistory.push({
                from: {row: fromRow, col: fromCol},
                to: {row: toRow, col: toCol},
                piece: piece,
                captured: capturedPiece
            });

            board[toRow][toCol] = piece;
            board[fromRow][fromCol] = '';
            
            // Zmƒõna hr√°ƒçe
            currentPlayer = currentPlayer === 'white' ? 'black' : 'white';
            
            updateDisplay();
            clearSelection();
            
            // Hl√°≈°en√≠ o tahu
            let message = `${piece} se p≈ôesunul na ${String.fromCharCode(97 + toCol)}${8 - toRow}`;
            if (capturedPiece) {
                message += ` a sebral ${capturedPiece}`;
            }
            
            updateGameStatus(message);
        }

        function getPossibleMoves(row, col) {
            const piece = board[row][col];
            const moves = [];
            
            switch(piece) {
                case '‚ôî': case '‚ôö': // Kr√°l
                    for (let dr = -1; dr <= 1; dr++) {
                        for (let dc = -1; dc <= 1; dc++) {
                            if (dr === 0 && dc === 0) continue;
                            const newRow = row + dr;
                            const newCol = col + dc;
                            if (isValidMove(newRow, newCol, currentPlayer)) {
                                moves.push({row: newRow, col: newCol});
                            }
                        }
                    }
                    break;
                    
                case '‚ôñ': case '‚ôú': // Vƒõ≈æ
                    const directions = [[0,1], [0,-1], [1,0], [-1,0]];
                    for (let [dr, dc] of directions) {
                        for (let i = 1; i < 8; i++) {
                            const newRow = row + dr * i;
                            const newCol = col + dc * i;
                            if (!isValidMove(newRow, newCol, currentPlayer)) break;
                            moves.push({row: newRow, col: newCol});
                            if (board[newRow][newCol] !== '') break;
                        }
                    }
                    break;

                case '‚ôó': case '‚ôù': // St≈ôelec
                    const diagonals = [[1,1], [1,-1], [-1,1], [-1,-1]];
                    for (let [dr, dc] of diagonals) {
                        for (let i = 1; i < 8; i++) {
                            const newRow = row + dr * i;
                            const newCol = col + dc * i;
                            if (!isValidMove(newRow, newCol, currentPlayer)) break;
                            moves.push({row: newRow, col: newCol});
                            if (board[newRow][newCol] !== '') break;
                        }
                    }
                    break;

                case '‚ôï': case '‚ôõ': // D√°ma
                    const allDirections = [[0,1], [0,-1], [1,0], [-1,0], [1,1], [1,-1], [-1,1], [-1,-1]];
                    for (let [dr, dc] of allDirections) {
                        for (let i = 1; i < 8; i++) {
                            const newRow = row + dr * i;
                            const newCol = col + dc * i;
                            if (!isValidMove(newRow, newCol, currentPlayer)) break;
                            moves.push({row: newRow, col: newCol});
                            if (board[newRow][newCol] !== '') break;
                        }
                    }
                    break;

                case '‚ôò': case '‚ôû': // Jezdec
                    const knightMoves = [[2,1], [2,-1], [-2,1], [-2,-1], [1,2], [1,-2], [-1,2], [-1,-2]];
                    for (let [dr, dc] of knightMoves) {
                        const newRow = row + dr;
                        const newCol = col + dc;
                        if (isValidMove(newRow, newCol, currentPlayer)) {
                            moves.push({row: newRow, col: newCol});
                        }
                    }
                    break;
                    
                case '‚ôô': // B√≠l√Ω pƒõ≈°ec
                    if (row > 0 && board[row-1][col] === '') {
                        moves.push({row: row-1, col});
                        if (row === 6 && board[row-2][col] === '') {
                            moves.push({row: row-2, col});
                        }
                    }
                    // Bran√≠
                    if (row > 0 && col > 0 && board[row-1][col-1] !== '' && !isPieceOwnedByPlayer(board[row-1][col-1], currentPlayer)) {
                        moves.push({row: row-1, col: col-1});
                    }
                    if (row > 0 && col < 7 && board[row-1][col+1] !== '' && !isPieceOwnedByPlayer(board[row-1][col+1], currentPlayer)) {
                        moves.push({row: row-1, col: col+1});
                    }
                    break;
                    
                case '‚ôü': // ƒåern√Ω pƒõ≈°ec
                    if (row < 7 && board[row+1][col] === '') {
                        moves.push({row: row+1, col});
                        if (row === 1 && board[row+2][col] === '') {
                            moves.push({row: row+2, col});
                        }
                    }
                    // Bran√≠
                    if (row < 7 && col > 0 && board[row+1][col-1] !== '' && !isPieceOwnedByPlayer(board[row+1][col-1], currentPlayer)) {
                        moves.push({row: row+1, col: col-1});
                    }
                    if (row < 7 && col < 7 && board[row+1][col+1] !== '' && !isPieceOwnedByPlayer(board[row+1][col+1], currentPlayer)) {
                        moves.push({row: row+1, col: col+1});
                    }
                    break;
            }
            
            return moves;
        }

        function isValidMove(row, col, player) {
            if (row < 0 || row >= 8 || col < 0 || col >= 8) return false;
            const targetPiece = board[row][col];
            if (targetPiece === '') return true;
            return !isPieceOwnedByPlayer(targetPiece, player);
        }

        function isPieceOwnedByPlayer(piece, player) {
            if (player === 'white') return whitePieces.includes(piece);
            return blackPieces.includes(piece);
        }

        function updateDisplay() {
            createBoard();
            const playerName = currentPlayer === 'white' ? 'B√≠l√Ω hr√°ƒç' : 'ƒåern√Ω hr√°ƒç';
            const turnIndicator = document.getElementById('turnIndicator');
            if (turnIndicator) {
                turnIndicator.textContent = `Na tahu: ${playerName}`;
            }
        }

        function updateGameStatus(message) {
            const gameStatus = document.getElementById('gameStatus');
            if (gameStatus) {
                gameStatus.textContent = message;
            }
        }

        function resetGame() {
            board = [
                ['‚ôú','‚ôû','‚ôù','‚ôõ','‚ôö','‚ôù','‚ôû','‚ôú'],
                ['‚ôü','‚ôü','‚ôü','‚ôü','‚ôü','‚ôü','‚ôü','‚ôü'],
                ['','','','','','','',''],
                ['','','','','','','',''],
                ['','','','','','','',''],
                ['','','','','','','',''],
                ['‚ôô','‚ôô','‚ôô','‚ôô','‚ôô','‚ôô','‚ôô','‚ôô'],
                ['‚ôñ','‚ôò','‚ôó','‚ôï','‚ôî','‚ôó','‚ôò','‚ôñ']
            ];
            currentPlayer = 'white';
            moveHistory = [];
            clearSelection();
            updateDisplay();
            updateGameStatus('Nov√° hra zaƒçala! Kliknƒõte na figurku, kterou chcete p≈ôesunout.');
        }

        function undoMove() {
            if (moveHistory.length === 0) {
                updateGameStatus('≈Ω√°dn√Ω tah k vr√°cen√≠.');
                return;
            }

            const lastMove = moveHistory.pop();
            board[lastMove.from.row][lastMove.from.col] = lastMove.piece;
            board[lastMove.to.row][lastMove.to.col] = lastMove.captured;
            
            currentPlayer = currentPlayer === 'white' ? 'black' : 'white';
            clearSelection();
            updateDisplay();
            updateGameStatus('Tah byl vr√°cen zpƒõt.');
        }

        function showHint() {
            const hints = [
                "üí° Sna≈æte se ovl√°dat st≈ôed ≈°achovnice!",
                "üí° V≈ædy chra≈àte sv√©ho kr√°le p≈ôed √∫toky.",
                "üí° Rozv√≠jejte figurky postupnƒõ a √∫ƒçelnƒõ.",
                "üí° Hledejte mo≈ænosti √∫toku na soupe≈ôovy figurky.",
                "üí° Koordinujte sv√© figurky pro lep≈°√≠ spolupr√°ci.",
                "üí° Sledujte, kde m√° soupe≈ô slab√© figurky.",
                "üí° Pƒõ≈°ci jsou slab√≠ jednotlivƒõ, ale siln√≠ ve skupinƒõ.",
                "üí° Jezdci jsou nejlep≈°√≠ na okraj√≠ch, vƒõ≈æe v otev≈ôen√Ωch sloupc√≠ch."
            ];
            
            const randomHint = hints[Math.floor(Math.random() * hints.length)];
            updateGameStatus(randomHint);
        }

        // Inicializace p≈ôi naƒçten√≠ str√°nky
        document.addEventListener('DOMContentLoaded', function() {
            // Inicializovat ≈°achovnici pokud je sekce hry aktivn√≠
            if (document.getElementById('game').classList.contains('active')) {
                createBoard();
            }
        });
    </script>
</body>
</html>
